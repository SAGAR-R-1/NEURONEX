<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI-Powered ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤</title>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Devanagari:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #2563eb;
            --secondary: #4f46e5;
            --success: #22c55e;
            --danger: #ef4444;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Noto Sans Devanagari', sans-serif;
        }

        body {
            background: #f8fafc;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }

        /* ‡§π‡•á‡§°‡§∞ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡•ç‡§∏ */
        .hero {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 4rem 0;
            text-align: center;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }

        /* ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§è‡§®‡§æ‡§≤‡§ø‡§∏‡§ø‡§∏ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® */
        .analysis-section {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin: 2rem 0;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        }

        .upload-box {
            border: 2px dashed #cbd5e1;
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .upload-box:hover {
            border-color: var(--primary);
            background: rgba(99,102,241,0.05);
        }

        .preview-container {
            margin: 1rem 0;
            position: relative;
        }

        .preview-media {
            max-width: 100%;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        /* ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡•á‡§∏ ‡§á‡§Ç‡§°‡§ø‡§ï‡•á‡§ü‡§∞‡•ç‡§∏ */
        .loader {
            display: none;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 1rem auto;
        }

        .progress-bar {
            height: 8px;
            background: #e2e8f0;
            border-radius: 4px;
            margin: 1rem 0;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: var(--primary);
            width: 0%;
            transition: width 0.3s ease;
        }

        /* ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü‡•ç‡§∏ ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤‡§ø‡§Ç‡§ó */
        .results-box {
            margin-top: 2rem;
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
        }

        .stock-item {
            display: grid;
            grid-template-columns: 100px 1fr;
            gap: 1rem;
            padding: 1rem;
            margin: 1rem 0;
            background: #f1f5f9;
            border-radius: 8px;
            transition: transform 0.3s ease;
        }

        .stock-item:hover {
            transform: translateY(-2px);
        }

        .stock-thumbnail {
            width: 100px;
            height: 70px;
            object-fit: cover;
            border-radius: 4px;
        }

        .stock-link {
            color: var(--primary);
            text-decoration: none;
            font-weight: 600;
        }

        /* ‡§è‡§®‡§ø‡§Æ‡•á‡§∂‡§® */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏‡§ø‡§µ ‡§°‡§ø‡§ú‡§º‡§æ‡§á‡§® */
        @media (max-width: 768px) {
            .hero h1 {
                font-size: 1.8rem;
            }
            
            .stock-item {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header class="hero">
        <div class="container">
            <h1>AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤</h1>
            <p>‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§è‡§ï ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡§∞</p>
        </div>
    </header>

    <main class="container">
        <!-- ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® -->
        <section class="analysis-section">
            <h2>üé¨ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ü‡•Ç‡§≤</h2>
            <div class="upload-box" id="dropZone" 
                 ondragover="handleDragOver(event)"
                 ondragleave="handleDragLeave(event)"
                 ondrop="handleDrop(event)">
                <p>‡§ï‡•ç‡§≤‡§ø‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã/‡§ë‡§°‡§ø‡§Ø‡•ã/‡§õ‡§µ‡§ø)</p>
                <small>‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§Ü‡§ï‡§æ‡§∞: 500MB | ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™: MP4, MOV, PNG, JPG</small>
                <input type="file" id="fileInput" hidden>
                <div class="preview-container" id="preview"></div>
                <div class="progress-bar">
                    <div class="progress" id="progress"></div>
                </div>
            </div>
            <div class="loader" id="loader"></div>
            <div class="results-box" id="results"></div>
        </section>

        <!-- ‡§Ö‡§®‡•ç‡§Ø ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® -->
        <!-- ... [‡§™‡§ø‡§õ‡§≤‡•á ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç] ... -->
    </main>

    <script>
        // API ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§®
        const API_CONFIG = {
            AI_ENDPOINT: 'YOUR_AI_API_ENDPOINT',
            PEXELS_KEY: 'YOUR_PEXELS_API_KEY',
            UNSPLASH_KEY: 'YOUR_UNSPLASH_API_KEY',
            MAX_SIZE: 500 * 1024 * 1024, // 500MB
            ALLOWED_TYPES: ['video/mp4', 'video/quicktime', 'image/png', 'image/jpeg']
        };

        // DOM Elements
        const elements = {
            fileInput: document.getElementById('fileInput'),
            dropZone: document.getElementById('dropZone'),
            preview: document.getElementById('preview'),
            progress: document.getElementById('progress'),
            loader: document.getElementById('loader'),
            results: document.getElementById('results')
        };

        // Event Handlers
        elements.dropZone.addEventListener('click', () => elements.fileInput.click());
        
        elements.fileInput.addEventListener('change', async (e) => {
            await handleFile(e.target.files[0]);
        });

        // File Handling
        async function handleFile(file) {
            try {
                validateFile(file);
                showPreview(file);
                const analysis = await analyzeMedia(file);
                const results = await fetchStockLinks(analysis);
                displayResults(results);
            } catch (error) {
                showError(error.message);
            }
        }

        function validateFile(file) {
            if (!API_CONFIG.ALLOWED_TYPES.includes(file.type)) {
                throw new Error('‡§Ö‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™');
            }
            if (file.size > API_CONFIG.MAX_SIZE) {
                throw new Error('‡§´‡§º‡§æ‡§á‡§≤ ‡§Ü‡§ï‡§æ‡§∞ ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï');
            }
        }

        function showPreview(file) {
            elements.preview.innerHTML = file.type.startsWith('video') 
                ? `<video controls class="preview-media"><source src="${URL.createObjectURL(file)}"></video>`
                : `<img src="${URL.createObjectURL(file)}" class="preview-media">`;
        }

        // API Integration
        async function analyzeMedia(file) {
            toggleLoader(true);
            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch(API_CONFIG.AI_ENDPOINT, {
                    method: 'POST',
                    body: formData,
                    onUploadProgress: updateProgress
                });
                return response.json();
            } finally {
                toggleLoader(false);
            }
        }

        async function fetchStockLinks(analysis) {
            const [pexels, unsplash] = await Promise.all([
                fetch(`https://api.pexels.com/v1/search?query=${analysis.keywords}`, {
                    headers: { Authorization: API_CONFIG.PEXELS_KEY }
                }),
                fetch(`https://api.unsplash.com/search/photos?query=${analysis.keywords}`, {
                    headers: { Authorization: `Client-ID ${API_CONFIG.UNSPLASH_KEY}` }
                })
            ]);
            return Promise.all([pexels.json(), unsplash.json()]);
        }

        // UI Updates
        function updateProgress(e) {
            const percent = Math.round((e.loaded / e.total) * 100);
            elements.progress.style.width = `${percent}%`;
        }

        function toggleLoader(show) {
            elements.loader.style.display = show ? 'block' : 'none';
        }

        function displayResults([pexelsData, unsplashData]) {
            elements.results.innerHTML = `
                <h3>‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ:</h3>
                ${generateResultsHTML(pexelsData.photos, 'Pexels')}
                ${generateResultsHTML(unsplashData.results, 'Unsplash')}
            `;
        }

        function generateResultsHTML(items, source) {
            return items.slice(0, 5).map(item => `
                <div class="stock-item">
                    <img src="${source === 'Pexels' ? item.src.small : item.urls.small}" 
                         class="stock-thumbnail" 
                         alt="${source} stock">
                    <div>
                        <a href="${source === 'Pexels' ? item.url : item.links.html}" 
                           class="stock-link" 
                           target="_blank">
                            ${source} ‡§™‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç ‚Üí
                        </a>
                        <p>‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü: ${source === 'Pexels' ? item.photographer : item.user.name}</p>
                    </div>
                </div>
            `).join('');
        }

        // Drag & Drop Handlers
        function handleDragOver(e) {
            e.preventDefault();
            elements.dropZone.style.borderColor = var(--primary);
        }

        function handleDragLeave(e) {
            e.preventDefault();
            elements.dropZone.style.borderColor = '#cbd5e1';
        }

        async function handleDrop(e) {
            e.preventDefault();
            handleDragLeave(e);
            await handleFile(e.dataTransfer.files[0]);
        }

        // Error Handling
        function showError(message) {
            elements.results.innerHTML = `
                <div style="color: ${var(--danger)}; padding: 1rem; background: #fee2e2; border-radius: 8px;">
                    ‚ö†Ô∏è ${message}
                </div>
            `;
        }
    </script>
</body>
</html>
